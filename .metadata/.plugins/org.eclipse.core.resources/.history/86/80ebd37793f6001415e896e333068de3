/**
 * 
 */
package huffman;

import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.PriorityQueue;
import java.util.Queue;

/**
 * @author Kevin Callahan
 *
 */
public class Encode {

	/**
	 * @param args SOURCEFILE TARGETFILE
	 */
	public static void main(String[] args) {
		String srcFileLoc = "samples\\text\\sample1.txt";
		Map<String, Integer> freqMap = new HashMap<String,Integer>();
		
		
		
		try {
			LineNumberReader in = new LineNumberReader(new FileReader(srcFileLoc));
			String line = null;
			
			while ((line = in.readLine()) != null) {
				//System.out.println(line);
				
				freqMap = getFrequencies(line, freqMap);
				
			}
			
			
			in.close();
		} catch (IOException e) {
			System.out.println("I/O Error");
			e.printStackTrace();
		}
	
		System.out.println("Character Frequencies" + HuffNode.EOF + "EOF");
		
		
		Queue<HuffNode> nodesRemaining = makeQueue(freqMap);
		
		HuffNode treeRoot = makeHuffTree(nodesRemaining);
		System.out.println("Huff Tree");
		
		
		
		Queue<CanonicalHuff> canonicalCodes = new PriorityQueue<CanonicalHuff>();
		traverse(treeRoot, canonicalCodes, -1);
		
		Map<String, String> codeMap = makeCodeMap(canonicalCodes);
		System.out.println("a: " + codeMap.get("a"));
		
		System.out.println("Priority Queue");
		int tmpSize = canonicalCodes.size();
		for(int i = 0; i<tmpSize; i++){
			CanonicalHuff tmp = canonicalCodes.poll();
			
			if(tmp.symbol.equals(HuffNode.EOF)){
				System.out.println("$" + "   " + tmp.len);
			} else {
				System.out.println(tmp.symbol + "   " + tmp.len);
			}
			
		}
		
		
		
		
		
	}

	
	public static HuffNode makeHuffTree(Queue<HuffNode> nodes){
		
		while(nodes.size() >1){
			
			HuffNode x = nodes.poll();
			HuffNode y = nodes.poll();
			
			HuffNode newNode = new HuffNode(x, y);
			
			nodes.add(newNode);
			
			
		}
		
		return nodes.poll();
	}
	
	public static Queue<HuffNode> makeQueue(Map<String,Integer> map){
		Queue<HuffNode> nodesRemaining = new PriorityQueue<HuffNode>();
		for(Entry<String, Integer> element : map.entrySet()){
			
			nodesRemaining.add(new HuffNode(element.getKey(),element.getValue()));
			
			System.out.println(element.getKey() + "   " + element.getValue()  );
		}
		return nodesRemaining;
	}
	
	public static void traverse(HuffNode node, Queue<CanonicalHuff> queue, int depth){
		if(node==null){
			return;
		}
		
		
		depth++;
		if(node.symbol.equals(HuffNode.EOF)){
			System.out.println("$" + "    " + node.freq);
		} else {
			System.out.println(node.symbol + "    " + node.freq);
		}
		
		
		
		if(!node.symbol.equals("")){
			CanonicalHuff tmp = new CanonicalHuff(node.symbol,depth);
			queue.add(tmp);
		}
		
		
		traverse(node.left, queue, depth);
		traverse(node.right, queue, depth);
		
		depth--;
	}
	
	
	public static Map<String, Integer> getFrequencies(String source, Map<String, Integer> freqMap){
		
		//Map<String, Integer> freq_map = new HashMap<String,Integer>();
			
		for(int i = 0; i<source.length(); i++){
			String sub = source.substring(i, i+1);
			
			if(freqMap.containsKey(sub)){
				freqMap.put(sub, freqMap.get(sub)+1 );
			} else {
				freqMap.put(sub, 1);
			}
		}
		freqMap.put(HuffNode.EOF, 1);
		return freqMap;
	}

	public static Map<String, String> makeCodeMap(Queue<CanonicalHuff> queue){
		
		Map<String, String> codeMap = new HashMap<String, String>();
		int codeBuilder = 0;
		
		CanonicalHuff currentHuff = queue.poll();
		System.out.println("len = " + currentHuff.len);
		String bin = String.format("%"+ currentHuff.len  +"s", Integer.toBinaryString(codeBuilder));
		bin = bin.replace(' ', '0');
		int currentLen = currentHuff.len;
		codeMap.put(currentHuff.symbol, bin);
		System.out.println("code = " + bin);
		while(!queue.isEmpty()){
			currentHuff = queue.poll();
			codeBuilder++;
			//if len of current is less than len of previous
			//then shift right by 1
			if(currentHuff.len<currentLen){
				codeBuilder = codeBuilder>>1;
				currentLen = currentHuff.len;
			}
			
			bin = String.format("%"+ currentHuff.len  +"s", Integer.toBinaryString(codeBuilder));
			bin = bin.replace(' ', '0');
			codeMap.put(currentHuff.symbol, bin);
			System.out.println("code = " + bin);
			
			
		}
		
		
		
		return codeMap;
	}
	
	//TEST BYTES
		/*	int b = 0;		
			String bin = String.format("%3s", Integer.toBinaryString(b));
			bin = bin.replace(' ', '0');
			System.out.println("b0 = " + bin);
			b++;
			bin = String.format("%3s", Integer.toBinaryString(b));
			bin = bin.replace(' ', '0');
			System.out.println("b1 = " + bin);
			b++;
			b = b>>1;
			bin = String.format("%2s", Integer.toBinaryString(b));
			bin = bin.replace(' ', '0');
			System.out.println("b2 = " + bin);
			b++;
			b = b>>1;
			bin = String.format("%1s", Integer.toBinaryString(b));
			bin = bin.replace(' ', '0');
			System.out.println("b3 = " + bin);*/
}
